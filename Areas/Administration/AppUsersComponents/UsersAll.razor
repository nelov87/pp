@page "/Administration/Users/All"

@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
<h3>Administration</h3>
<AuthorizeView>
    <Authorized>
        @if (@context.User.IsInRole(ADMINISTRATION_ROLE))
                {






        <div class="content-wrapper">
            <section class="content">
                <div class="row">

                    <div class="col-12">
                        <div class="card">
                            <div class="card-header">
                                <h3 class="card-title">Categories</h3>

                                <div class="card-tools">
                                    <div class="input-group input-group-sm" style="width: 150px;">
                                        <input type="text" name="table_search" class="form-control float-right"
                                            placeholder="Search">

                                        <div class="input-group-append">
                                            <button type="submit" class="btn btn-default"><i
                                                    class="fas fa-search"></i></button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- /.card-header -->
                            <div class="card-body table-responsive p-0">
                                <table class="table table-hover text-nowrap">
                                    <thead>
                                        <tr>
                                            <th>Id</th>
                                            <th>User Name</th>
                                            <th>Email</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var user in ColUsers)
                                        {
                                            <tr>
                                                <td>@user.Id.Substring(0, 5) ...</td>
                                                <td>@user.UserName</td>
                                                <td>@user.Email</td>
                                                <td>
                                                    <!-- Edit the current forecast -->
                                                    <button class="btn btn-primary" @onclick="(() => EditUser(user))">
                                                        Edit
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                            <!-- /.card-body -->
                        </div>
                        <!-- /.card -->

                    </div>

                </div>
            </section>





            <section class="content">
                <div class="row">

                    <div class="col-md-10">
                        <!-- general form elements -->
                        <div class="card card-primary">
                            <div class="card-header">
                                <h3 class="card-title">Options</h3>
                            </div>
                            <!-- /.card-header -->
                            <!-- form start -->
                            <div class="card-body">
                                <button type="button" class="btn btn-primary" @onclick="AddNewUser">Add User</button>
                            </div>


                            <div class="card-footer">
                                @* <button form="@pageId" type="submit" class="btn btn-success">Запиши</button> *@
                            </div>


                        </div>
                        <!-- /.card -->




                    </div>
                    <!-- /div col-6 /.col (left) -->


                    <div class="col-md-2">
                        <!-- general form elements disabled -->
                        <div class="card card-warning">
                            <div class="card-header">
                                <h3 class="card-title">General Elements</h3>
                            </div>
                            <!-- /.card-header -->
                            <div class="card-body">



                            </div>
                            <!-- /.card-body -->
                        </div>
                        <!-- /.card -->
                    </div>


                </div>
            </section>
            <!-- /.content -->

            @if (ShowPopup)
            {
                <!-- This is the popup to create or edit a user -->
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Edit User</h3>
                                <!-- Button to close the popup -->
                                <button type="button" class="close" @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <!-- Edit form for the current user -->
                            <div class="modal-body">
                                <!-- Only show Id if not a new user -->
                                @if (objUser.Id != "")
                                {
                                    <p>@objUser.Id</p>
                                }
                                <!-- Only allow edit if a new user -->
                                @if (objUser.Id != "")
                                {
                                    <p>@objUser.UserName</p>
                                }
                                else
                                {
                                    <input class="form-control" type="text" placeholder="UserName" @bind="objUser.UserName" />
                                }
                                <input class="form-control" type="text" placeholder="Email" @bind="objUser.Email" />
                                <input class="form-control" type="password" placeholder="Password"
                                    @bind="objUser.PasswordHash" />
                                <select class="form-control" @bind="@CurrentUserRole">
                                    @foreach (var option in Options)
                                    {
                                        <option value="@option">
                                            @option
                                        </option>
                                    }
                                </select>
                                <br /><br />
                                <!-- Button to save the user -->
                                <button class="btn btn-primary" @onclick="SaveUser">
                                    Save
                                </button>
                                <!-- Only show delete button if not a new record -->
                                @if (objUser.Id != "")
                                {
                                    <!-- Button to delete the forecast -->
                                    <button class="btn btn-danger" @onclick="DeleteUser">
                                        Delete
                                    </button>
                                }
                                <br />
                                <span style="color:red">@strError</span>
                            </div>
                        </div>
                    </div>
                </div>
            }


        </div>
        }
                else
                {
        <p>You're not signed in as a user in @ADMINISTRATION_ROLE.</p>
        }





    </Authorized>
    <NotAuthorized>
        <p>You're not loggged in.</p>
    </NotAuthorized>
</AuthorizeView>
@*@code {

    {
    // ensure there is a ADMINISTRATION_ROLE
    var RoleResult = await _RoleManager.FindByNameAsync(ADMINISTRATION_ROLE);
    if (RoleResult == null)
    {
    // Create ADMINISTRATION_ROLE Role
    await _RoleManager.CreateAsync(new IdentityRole(ADMINISTRATION_ROLE));
    }
    // Ensure a user named Admin@BlazorHelpWebsite.com is an Administrator
    var user = await _UserManager.FindByNameAsync("Admin@BlazorHelpWebsite.com");
    if (user != null)
    {
    // Is Admin@BlazorHelpWebsite.com in administrator role?
    var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
    if (!UserResult)
    {
    // Put admin in Administrator role
    await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
    }
    }
    // Get the current logged in user
    CurrentUser = (await authenticationStateTask).User;
    }
    }*@


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string ADMINISTRATION_ROLE = "Administrators";
    System.Security.Claims.ClaimsPrincipal CurrentUser;
    //protected override async Task OnInitializedAsync()
    //{
    // // ensure there is a ADMINISTRATION_ROLE
    // var RoleResult = await _RoleManager.FindByNameAsync(ADMINISTRATION_ROLE);
    // if (RoleResult == null)
    // {
    // // Create ADMINISTRATION_ROLE Role
    // await _RoleManager.CreateAsync(new IdentityRole(ADMINISTRATION_ROLE));
    // }
    // // Ensure a user named Admin@BlazorHelpWebsite.com is an Administrator
    // var user = await _UserManager.FindByNameAsync("nelov87@gmail.com");
    // if (user != null)
    // {
    // // Is Admin@BlazorHelpWebsite.com in administrator role?
    // var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
    // if (!UserResult)
    // {
    // // Put admin in Administrator role
    // await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
    // }
    // }
    // // Get the current logged in user
    // CurrentUser = (await authenticationStateTask).User;
    //}

    // Property used to add or edit the currently selected user
    IdentityUser objUser = new IdentityUser();
    // Tracks the selected role for the currently selected user
    string CurrentUserRole { get; set; } = "Users";
    // Collection to display the existing users
    List<IdentityUser> ColUsers = new List<IdentityUser>();
    // Options to display in the roles dropdown when editing a user
    List<string> Options = new List<string>() { "Users", "Administrators" };
    // To hold any possible errors
    string strError = "";
    // To enable showing the Popup
    bool ShowPopup = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        GetUsers();
    }

    public void GetUsers()
    {
        // clear any error messages
        strError = "";
        // Collection to hold users
        ColUsers = new List<IdentityUser>();
        // get users from _UserManager
        var user = _UserManager.Users.Select(x => new IdentityUser
        {
            Id = x.Id,
            UserName = x.UserName,
            Email = x.Email,
            PasswordHash = "*****"
        });
        foreach (var item in user)
        {
            ColUsers.Add(item);
        }
    }


    void AddNewUser()
    {
        // Make new user
        objUser = new IdentityUser();
        objUser.PasswordHash = "*****";
        // Set Id to blank so we know it is a new record
        objUser.Id = "";
        // Open the Popup
        ShowPopup = true;
    }
    async Task SaveUser()
    {
        try
        {
            // Is this an existing user?
            if (objUser.Id != "")
            {
                // To be implemented later...
            }
            else
            {
                // Insert new user
                var NewUser =
                    new IdentityUser
                {
                    UserName = objUser.UserName,
                    Email = objUser.Email
                };
                var CreateResult =
                    await _UserManager
                    .CreateAsync(NewUser, objUser.PasswordHash);
                if (!CreateResult.Succeeded)
                {
                    if (CreateResult
                        .Errors
                        .FirstOrDefault() != null)
                    {
                        strError =
                            CreateResult
                            .Errors
                            .FirstOrDefault()
                            .Description;
                    }
                    else
                    {
                        strError = "Create error";
                    }
                    // Keep the popup opened
                    return;
                }
                else
                {
                    // Handle Roles
                    if (CurrentUserRole == ADMINISTRATION_ROLE)
                    {
                        // Put admin in Administrator role
                        await _UserManager
                            .AddToRoleAsync(NewUser, ADMINISTRATION_ROLE);
                    }
                }
            }
            // Close the Popup
            ShowPopup = false;
            // Refresh Users
            GetUsers();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }
    async Task EditUser(IdentityUser _IdentityUser)
    {
        // Set the selected user
        // as the current user
        objUser = _IdentityUser;
        // Get the user
        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            // Is user in administrator role?
            var UserResult =
                await _UserManager
                .IsInRoleAsync(user, ADMINISTRATION_ROLE);
            if (UserResult)
            {
                CurrentUserRole = ADMINISTRATION_ROLE;
            }
            else
            {
                CurrentUserRole = "Users";
            }
        }
        // Open the Popup
        ShowPopup = true;
    }
    async Task DeleteUser()
    {
        // Close the Popup
        ShowPopup = false;
        // Get the user
        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            // Delete the user
            await _UserManager.DeleteAsync(user);
        }
        // Refresh Users
        GetUsers();
    }
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }

}